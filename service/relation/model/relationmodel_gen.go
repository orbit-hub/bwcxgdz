// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	relationFieldNames          = builder.RawFieldNames(&Relation{})
	relationRows                = strings.Join(relationFieldNames, ",")
	relationRowsExpectAutoSet   = strings.Join(stringx.Remove(relationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	relationRowsWithPlaceHolder = strings.Join(stringx.Remove(relationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
	FansId                      = "user_id"
	FollowId                    = "follow"
	cacheRelationIdPrefix       = "cache:relation:id:"
)

type (
	relationModel interface {
		Insert(ctx context.Context, data *Relation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Relation, error)
		Update(ctx context.Context, newData *Relation) error
		Delete(ctx context.Context, id int64) error
		DeleteRelation(ctx context.Context, userId int64, followId int64) error
		GetFollowerList(ctx context.Context, id int64) ([]int64, error)
		GetFollowList(ctx context.Context, id int64) ([]int64, error)
	}

	defaultRelationModel struct {
		sqlc.CachedConn
		table string
	}

	Relation struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UserId    int64     `db:"user_id"`
		Follow    int64     `db:"follow"`
	}
)

func newRelationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRelationModel {
	return &defaultRelationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`relation`",
	}
}

func (m *defaultRelationModel) Delete(ctx context.Context, id int64) error {
	relationIdKey := fmt.Sprintf("%s%v", cacheRelationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, relationIdKey)
	return err
}

func (m *defaultRelationModel) DeleteRelation(ctx context.Context, userId int64, followId int64) error {

	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ? and `follow` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId, followId)
	})
	return err
}

func (m *defaultRelationModel) FindOne(ctx context.Context, id int64) (*Relation, error) {
	relationIdKey := fmt.Sprintf("%s%v", cacheRelationIdPrefix, id)
	var resp Relation
	err := m.QueryRowCtx(ctx, &resp, relationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", relationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationModel) GetFollowerList(ctx context.Context, id int64) ([]int64, error) {
	var UserId []int64
	err := m.QueryRowsNoCacheCtx(ctx, &UserId,
		fmt.Sprintf("select %s from %s where `follow` = ? ", FansId, m.table), id)
	switch err {
	case nil:
		return UserId, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationModel) GetFollowList(ctx context.Context, id int64) ([]int64, error) {
	var UserId []int64
	err := m.QueryRowsNoCacheCtx(ctx, &UserId,
		fmt.Sprintf("select %s from %s where `user_id` = ? ", FollowId, m.table), id)
	switch err {
	case nil:
		return UserId, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationModel) Insert(ctx context.Context, data *Relation) (sql.Result, error) {
	relationIdKey := fmt.Sprintf("%s%v", cacheRelationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, relationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UserId, data.Follow)
	}, relationIdKey)
	return ret, err
}

func (m *defaultRelationModel) Update(ctx context.Context, data *Relation) error {
	relationIdKey := fmt.Sprintf("%s%v", cacheRelationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, relationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UserId, data.Follow, data.Id)
	}, relationIdKey)
	return err
}

func (m *defaultRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRelationIdPrefix, primary)
}

func (m *defaultRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", relationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRelationModel) tableName() string {
	return m.table
}
